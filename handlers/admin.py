from aiogram import types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from create_bot import bot, id_admin
from data_base import sqlite_db
from keyboards import kb_adm_1, kb_adm_2, kb_iniine

storage = MemoryStorage()

class state_admin(StatesGroup):# —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∞
    input_code = State()
    input_name = State()
    input_manager = State()
    callback = State()
    change_status = State()
    callback_all = State()

async def new_chain (message: types.Message): # –≤–≤–æ–¥  –Ω–æ–≤–æ–π —Å–µ—Ç–∏
    if message.chat.id == id_admin:
        await state_admin.next()
        await bot.send_message(id_admin, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ç–∏')

async def input_code_chain (message: types.Message, state: FSMContext): #  –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å–µ—Ç–∏
    if message.chat.id == id_admin:
        try:
            code_chain = int(message.text)
            try:
                name_chain = sqlite_db.sql_check_code(str(code_chain))
                await bot.send_message(id_admin, '–î–∞–Ω–Ω–∞—è —Å–µ—Ç—å:" ' + str(name_chain[0]) + '" —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!')
                await state.finish()
            except:
                await bot.send_message(id_admin, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
                async with state.proxy() as data:
                    data['code_chain'] = message.text
                    await state_admin.next()
        except:
            await bot.send_message(id_admin, "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")

async def input_name_chain (message: types.Message, state: FSMContext):# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
    async with state.proxy() as data:
        data['name_chain'] = message.text
        await bot.send_message(id_admin, '–£–∫–∞–∂–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=kb_adm_2)
        await state_admin.next()

async def input_manager (message: types.Message, state: FSMContext):# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    admin_data = await state.get_data()
    code_chain = admin_data['code_chain']
    name_chain = admin_data['name_chain']
    async with state.proxy() as data:
        data['manager'] = message.text
    await state_admin.next()
    await bot.send_message(id_admin, '–í—ã –∂–µ–ª–∞–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å: ‚Ññ' + code_chain + '_' + name_chain + '. –ú–µ–Ω–µ–¥–∂–µ—Ä: ' + message.text + '? \n–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–î–∞", '
     '–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–ù–µ—Ç" –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥. ', reply_markup=kb_iniine)

async def callback_step (callback : types.CallbackQuery, state: FSMContext): # –æ–±–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    action = callback.data.split('_')[1]
    if action == '1':
        admin_data = await state.get_data()
        code_chain = admin_data['code_chain']
        name_chain = admin_data['name_chain']
        manager = admin_data['manager']
        sqlite_db.sql_insert_new_chain(code_chain, name_chain, manager)
        await bot.send_message(id_admin, '–°–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', reply_markup=kb_adm_1)
        await state.finish()
    if action == '2':
        await bot.send_message(id_admin, '–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–≤–æ–¥–∞', reply_markup=kb_adm_1)
        await state.finish()

async def report (message: types.Message):
    await report_1()
async def report_1 ():# –æ—Ç–ø—Ä–∞–≤–∫–∞  –æ—Ç—á—ë—Ç–∞ –ø–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏—è–º
    try:
        report = sqlite_db.sql_report()
        text = ''
        for t in report:
            text = text + '\n' + str(t)
        await bot.send_message(id_admin, str(text), reply_markup=kb_adm_1)
    except:
        await bot.send_message(id_admin, '–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', reply_markup=kb_adm_1)

async def input_number_request (message: types.Message): # –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await bot.send_message(id_admin, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è')
    await state_admin.change_status.set()

async def change_status (message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    try:
        number_request = int(message.text)
        request = sqlite_db.sql_change_status_request(number_request)
        if request == []:
            await bot.send_message(id_admin, '–û–±—Ä–∞—â–µ–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=kb_adm_1)
            await state.finish()
        else:
            await bot.send_message(id_admin, '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω', reply_markup=kb_adm_1)
            await state.finish()
    except:
        await bot.send_message(id_admin, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

async def change_all_status (message: types.Message): # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await state_admin.callback_all.set()
    await bot.send_message(id_admin, '–í—ã –¥–µ–π—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –Ω–∞ "–û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"', reply_markup=kb_iniine)

async def call_all (callback : types.CallbackQuery, state: FSMContext): # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–¥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    action = callback.data.split('_')[1]
    if action == '1':
        sqlite_db.sql_change_status_all()
        await bot.send_message(id_admin, '–ò–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=kb_adm_1)
        await state.finish()
    if action == '2':
        await bot.send_message(id_admin, '–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–≤–æ–¥–∞', reply_markup=kb_adm_1)
        await state.finish()

def register_handler_admin (dp : Dispatcher):# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.register_message_handler(new_chain, commands='üÜï_chain', state=None)
    dp.register_message_handler(input_code_chain, content_types=['text'], state=state_admin.input_code)
    dp.register_message_handler(input_name_chain, state=state_admin.input_name)
    dp.register_message_handler(input_manager, state=state_admin.input_manager)
    dp.register_callback_query_handler(callback_step, Text(startswith='btn'), state=state_admin.callback)
    dp.register_message_handler(report, commands='‚ö†Ô∏è_report', state=None)
    dp.register_message_handler(input_number_request, commands='üîÇ_status', state=None)
    dp.register_message_handler(change_status, state=state_admin.change_status)
    dp.register_message_handler(change_all_status, commands='‚≠ï_all_statuses', state=None)
    dp.register_callback_query_handler(call_all, Text(startswith='btn'), state=state_admin.callback_all)




