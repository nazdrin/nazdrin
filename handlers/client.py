from aiogram import types, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import bot, id_admin
from handlers import answers
from data_base import sqlite_db
from keyboards import kb_cl_1, kb_cl_3, kb_cl_4, button_dict, keyboard, kb_adm_1

storage = MemoryStorage()

class state_user(StatesGroup): # —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    Q_0 = State()
    Q_1 = State()
    Q_2 = State()
    Q_3 = State()
    Q_4 = State()
    Q_5 = State()
    Q_6 = State()

async def handle_start(message: types.Message, state: FSMContext):# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ñ start
    if message.chat.id == id_admin:
        await bot.send_message(id_admin, '–ü—Ä–∏–≤–µ—Ç! ', reply_markup=kb_adm_1)# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    else:
        try: # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞  –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            id_user = message.chat.id
            chain = sqlite_db.sql_select(id_user)
            await state_user.Q_2.set()
            async with state.proxy() as data:
                data['code_chain'] = chain[0]
                data['name_chain'] = chain[1]
            await bot.send_message(message.chat.id, '–í—ñ—Ç–∞—î–º–æ, ' + str(
                message.from_user.first_name) + '! –í–∏ —î –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–µ—Ä–µ–∂—ñ "' + str(chain[1])
                                   + answers.welcome_reg, reply_markup=kb_cl_1)
        except: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await state_user.Q_1.set()
            await bot.send_message(message.chat.id,
                                   '–í—ñ—Ç–∞—î–º–æ, ' + str(message.from_user.first_name) + answers.welcome_noreg)

async def registration(message: types.Message, state: FSMContext): # –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        code_chain = str(message.text)
        id_user = message.from_user.id
        first_name = message.from_user.first_name
        name_chain = sqlite_db.sql_select_name(code_chain, id_user, first_name)# –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ë–î
        await state_user.next()
        async with state.proxy() as data:
            data['code_chain'] = code_chain
            data['name_chain'] = name_chain # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(message.chat.id,
                               '–í–∏ —î –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–æ–º –º–µ—Ä–µ–∂—ñ "' + str(name_chain) + answers.welcome_reg,
                               reply_markup=kb_cl_1) # –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    except:
        await bot.send_message(message.from_user.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥!‚å®Ô∏è')

async def first_menu(message: types.Message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    father_button_list = button_dict.get(message.text)
    if father_button_list == None:
        await bot.send_message(message.from_user.id,
                               '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ä–æ–∑–¥—ñ–ªüóÇ, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ üëá')# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥
    else:
        async with state.proxy() as data:
            data['father_button_list'] = father_button_list # –∑–∞–ø–∏—Å—å —Å–ª–æ–≤–∞—Ä—è –≤  –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
        kb_cl_2 = keyboard.kb_cl_2(father_button_list)
        await bot.send_message(message.from_user.id, answers.answer_selection, reply_markup=kb_cl_2) # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
        await state_user.next()

async def second_menu(message: types.Message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –º–µ–Ω—é
    users_data = await state.get_data()
    father_button_list = users_data['father_button_list']# –¥–æ—Å—Ç–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    list_button = father_button_list.get(message.text)
    if list_button == None:
        if message.text == '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚§¥Ô∏èÔ∏è':
            await state_user.Q_2.set()
            await bot.send_message(message.from_user.id, answers.type_selection, reply_markup=kb_cl_1)
        elif message.text == '–ó–∞–ø–∏—Ç–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞‚ÅâÔ∏è':
            async with state.proxy() as data: # –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
                data['time_request'] = answers.hours_48
                data['main_question'] = message.text
            await state_user.next()
            await bot.send_message(message.from_user.id, answers.warning_before, reply_markup=kb_cl_3)
        else:
            await bot.send_message(message.from_user.id,
                                   answers.type_selection)
    else:
        question = list_button[0]
        async with state.proxy() as data:
            data['time_request'] = list_button[1]
            data['main_question'] = message.text
        await state_user.next()
        await bot.send_message(message.from_user.id, question, reply_markup=kb_cl_3)

async def last_menu(message: types.Message):# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    if message.text == '–î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Äüìù':
        await state_user.next()
        await bot.send_message(message.from_user.id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä üñå', reply_markup=kb_cl_4)
    elif message.text == '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚§¥Ô∏èÔ∏è':
        await state_user.Q_2.set()
        await bot.send_message(message.from_user.id, answers.type_selection, reply_markup=kb_cl_1)
    else:
        await bot.send_message(message.from_user.id, '–î–ª—è —Ç–æ–≥–æ —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫, –∫–æ—Ä–∏—Å—Ç—É—é—á–∏—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ üëá')

async def start_dialog(message: types.Message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚§¥Ô∏èÔ∏è':
        await bot.send_message(message.from_user.id, answers.type_selection,
                               reply_markup=kb_cl_1)
        await state_user.Q_2.set()
    else:
        number_request = sqlite_db.number_json()
        users_data = await state.get_data()
        name_chain = users_data['name_chain']
        code_chain = users_data['code_chain']
        main_question = users_data['main_question']
        time_request = users_data['time_request']
        time_message = message.date
        id_user = message.from_user.id
        async with state.proxy() as data:
            data['number_request'] = number_request
        status = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        text_request = message.text
        await bot.send_message(id_admin, '–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è N ' + str(number_request) + ', –≤—ñ–¥ –º–µ—Ä–µ–∂—ñ: ' + name_chain
                               + ' (' + code_chain + '),\n' + main_question + ' (' +
                               time_request + ')')
        id_m = await bot.forward_message(id_admin, message.chat.id, message.message_id)
        id_message = id_m.message_id
        sqlite_db.sql_insert_message(number_request, id_user, id_message, text_request, status, code_chain, name_chain, time_message)
        await bot.send_message(message.from_user.id,
                               '–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. –í–æ–Ω–æ –Ω–∞–¥—ñ–π—à–ª–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—á—ñ–∫—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚è≥ –ø—Ä–æ—Ç—è–≥–æ–º ' +
                               time_request)
        await state_user.next()

async def question(message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∏—Ö –∞–¥–º–∏–Ω–∞
    if message.text == '–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚§¥Ô∏èÔ∏è':
        await bot.send_message(message.from_user.id, answers.type_selection,
                               reply_markup=kb_cl_1)
        await state_user.Q_2.set()
    else:
        users_data = await state.get_data()
        number_request = users_data['number_request']
        name_chain = users_data['name_chain']
        code_chain = users_data['code_chain']
        time_message = message.date
        id_user = message.from_user.id
        async with state.proxy() as data:
            data['number_request'] = number_request
        status = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        text_request = message.text
        id_m = await bot.forward_message(id_admin, message.chat.id, message.message_id)
        id_message = id_m.message_id
        sqlite_db.sql_insert_message(number_request, id_user, id_message, text_request, status, code_chain, name_chain,
                                     time_message)

async def defolt(message, state: FSMContext): # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—á–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∞
    if message.chat.id == id_admin:
        try:
            if message.reply_to_message.forward_from.id:
                await bot.forward_message(message.reply_to_message.forward_from.id, id_admin, message.message_id)
                await bot.send_message(id_admin, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
                sqlite_db.sql_change_status_message(message.reply_to_message.message_id)
            else:
                await bot.send_message(id_admin, '–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        except:
            await bot.send_message(id_admin, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
    else:
        id_user = message.chat.id
        try:
            await state_user.Q_2.set()
            chain = sqlite_db.sql_select(id_user)

            async with state.proxy() as data:
                data['code_chain'] = chain[0]
                data['name_chain'] = chain[1]
            await bot.send_message(message.from_user.id, answers.type_selection, reply_markup=kb_cl_1)
        except:
            await state_user.Q_1.set()
            await bot.send_message(message.chat.id,
                                   '–í—ñ—Ç–∞—î–º–æ, ' + str(message.from_user.first_name) + answers.welcome_noreg)

def register_handler_client (dp : Dispatcher):# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.register_message_handler(handle_start, commands='start', state=None)
    dp.register_message_handler(registration, state=state_user.Q_1)
    dp.register_message_handler(first_menu, state=state_user.Q_2)
    dp.register_message_handler(second_menu, state=state_user.Q_3)
    dp.register_message_handler(last_menu, state=state_user.Q_4)
    dp.register_message_handler(start_dialog, state=state_user.Q_5, content_types=['text', 'photo', 'document', 'video'])
    dp.register_message_handler(question, state=state_user.Q_6, content_types=['text', 'photo', 'document', 'video'])
    dp.register_message_handler(defolt, content_types=['text', 'photo', 'document', 'video'])